<resources>
    <string name="app_name">Microprocessor</string>
    <string name="navigation_drawer_open">Open navigation drawer</string>
    <string name="navigation_drawer_close">Close navigation drawer</string>
    <string name="nav_header_title">Android Studio</string>
    <string name="nav_header_subtitle">android.studio@android.com</string>
    <string name="nav_header_desc">Navigation header</string>
    <string name="action_settings">Settings</string>

    <string name="menu_home">Home</string>
    <string name="menu_gallery">Gallery</string>
    <string name="menu_slideshow">Slideshow</string>
    <string name="menu_tools">Tools</string>
    <string name="menu_share">Share</string>
    <string name="menu_send">Send</string>
    <string name="textview">TextView</string>
    <string name="text1"><b><u>INTRODUCTION</u></b></string>
    <string name="text2">MICROPROCESSOR</string>
    <string name="text3">      Microprocessor is a multiple purpose programmable clock driven, register based electronic device that reads binary instructions from memory, accepts binary data as input and processing this data according to the instructions written in the memory. The microprocessor is capable of performing computing functions and making decisions to change the sequence of program execution. The most important technological invention of modern times is the “microprocessor”. The microprocessor is capable of performing computing functions and making decisions to change the sequence of program execution. The microprocessor can be embedded in a larger system, and can function as the CPU of a computer called a microcomputer</string>
    <string name="text4">HISTORY OF MICROPROCESSOR</string>
    <string name="text5">  Intel introduced its first 4-bit PMOS microprocessor 4004 in the year 1971. It has 16 pins, 640-bytes of memory addressing capability and 10 address lines. After this enhanced version of 4004, a 4-bit, Intel 4040 was developed. In 1972, Intel introduced its first 8-bit processor Intel 8008,which also uses PMOS technology. The PMOS technology Processors were slow and not compatible with TTL logic. These microprocessors  could not survive as general purpose microprocessor due to design limitations. In 1974,  Intel introduced its more powerful and faster 8 bit NMOS microprocec- essor Intel 8080. These  processors were faster and  compatible with TTL logic.  </string>
    <string name="text6">8085 MICROPROCESSOR</string>
    <string name="text7">It is an 8-bit microprocessor having 40 pins based Von Neumann Architecture     </string>
    <string name="text8"><u><b>MEMORIES</b></u></string>
    <string name="text9"><b> </b></string>


    //project memories(topics)
    <string name="heading_mem"><u>Memories</u></string>
    <string name="line1">-> A memory unit is the collection of storage unit or devices together.</string>
    <string name="line2">-> The memory unit stores the binary information in the form of bits.</string>
    <string name="line3">-> Generally,it is classified into two categories:<b>Volatile</b>memory and <b>Non-Volatile</b>memory.</string>
    <string name="line4"><u>Volatile Memory</u></string>
    <string name="line5"> It loses its data when power is switched off. For example- ROM,Flash,etc.</string>
    <string name="line6"><u>Non-Volatile Memory</u></string>
    <string name="line7"> It is a permanent storage and does not loose any data when power is switched off. For example- SRAM,DRAM,etc</string>
    <string name="line8"> <u>Memory Hierarchy in a Computer System.</u></string>
    <string name="line9">a)<u>Main Memory</u></string>
    <string name="line10"> Memory unit that communicates directly with the CPU(RAM).</string>
    <string name="line11">b)<u>Auxiliary Memory</u></string>
    <string name="line12">Device that provide backup storage.For example:Magnetic disks and tapes</string>
    <string name="line13">c)<u>Cache Memory</u></string>
    <string name="line14">Special very high speed memory to increase the processing speed(cache RAM).</string>

    //project ineterrupt(topics)
    <string name="interrupt1"><u> Interruts in 8085</u></string>
    <string name="interrupt2"> Interrupts are the signal generated by the external devices to request the microprocessor to perform a task. There are 6 pins availabel in 8085 for interrupt,i.e. TRAP, RST 7.5, RST 6.5, RST 5.5, INTR and INTA.</string>
    <string name="interrupt3"> Interrupt  are classified into following groups based on their parameter:</string>
    <string name="interrupt4"> 1. Vector Interrupt</string>
    <string name="interrupt5"> In this type of interrupt, the interrupt address is known to the processor.</string>
    <string name="interrupt6"><b>Example</b> RST7.5, RST6.5, RST5.5, TRAP.</string>
    <string name="interrupt7"> 2. Non-Vector Interrupt</string>
    <string name="interrupt8"> In this type of interrupt. the interrupt address is not known to the processor so, the interrupt address needs to be sent externally by the device to perform interrupts</string>
    <string name="interrupt9"><b>Example</b> INTR</string>
    <string name="interrupt10"> 3. Maskable Interrupt</string>
    <string name="interrupt11"> In this type of interrupt, we can disable the interrupt by writing some instructions into the program.</string>
    <string name="interrupt12"><b>Example</b> RST7.5, RST6.5, RST5.5.</string>
    <string name="interrupt13"> 4. Non-Maskable Interrupt</string>
    <string name="interrupt14"> In this type of interrupt, we cannot disable the interrupt by writing some instructions into the program.</string>
    <string name="interrupt15"><b>Example</b> TRAP.</string>
    <string name="interrupt16"> 5. Software Interrupt</string>
    <string name="interrupt17"> In this type of interrupt,the programmer has to add the instructions into the program to execute the interrupt.</string>
    <string name="interrupt18"><b>Example</b> RST0, RST1, RST3, RST4, RST5, RST6, RST7.</string>
    <string name="interrupt19"> 6. Hardware Interrupt</string>
    <string name="interrupt20"> An external device initiates the hardware interrupts and placing an appropriate signal at the interrupt pin of the processor. If the interrupt is accepted then the processor executes  an interrupt service routine.</string>
    <string name="interrupt21"><b>Example</b> TRAP, RST7.5, RST6.5, RST5.5,INTA.</string>

    //project addressing mode(topics)
    <string name="adrmod1"><u>8085 addressing mode</u></string>
    <string name="adrmod2"> These are the instructions used to transfer the data from one register to another register,from the memory to the register, and from the register to the memory without any alteration in the content.</string>
    <string name="adrmod3"> Addressing modes in 8085 is classified into 5 groups</string>
    <string name="adrmod4">1. Immediate addressing mode</string>
    <string name="adrmod5"> In this mode, the 8/16-bit data is specified in the instruction itself as one of its operand</string>
    <string name="adrmod6"> Example</string>
    <string name="adrmod7"> MVI A,30H (30H is copied into the register A)</string>
    <string name="adrmod8"> ADI 30H (30H is added to content of accumulator)</string>
    <string name="adrmod9">2. Register addressing mode</string>
    <string name="adrmod10"> In this mode, the data is copied from one register to another.</string>
    <string name="adrmod11"> Example</string>
    <string name="adrmod12"> MOV B,A (The content of A is copied into the register B)</string>
    <string name="adrmod13"> ADD C (The content of the register is added with the content of accumulator)</string>
    <string name="adrmod14">3. Direct addressing mode</string>
    <string name="adrmod15"> In this mode, the data is directly copied from the given address to the register.</string>
    <string name="adrmod16"> Example</string>
    <string name="adrmod17"> LDA 3000H (The content at the location 3000H is copied to the register A)</string>
    <string name="adrmod18"> IN 00H (Read data from 00H port)</string>
    <string name="adrmod19">4. Indirect addressing mode</string>
    <string name="adrmod20"> In this mode,the data is transferred from one register to another by using the address pointed by the register</string>
    <string name="adrmod21"> Example</string>
    <string name="adrmod22"> MOV A,M (Data is transferred from the memory location pointed by the register to the accumulator)</string>
    <string name="adrmod23"> LDAX B (Load accumulator with the address in register B-C)</string>
    <string name="adrmod24">5. Implied addressing mode</string>
    <string name="adrmod25"> This mode does not require any operand,the data is specified by the opcode itself.</string>
    <string name="adrmod26"> Example</string>
    <string name="adrmod27"> CMP (Complement accumulator)</string>
    <string name="adrmod28"> RAL (Rotate accumulator left)</string>


    //Timing diagram(topics)
    <string name="td1"> Timing Diagram of 8085</string>
    <string name="td2">It is one of the best way to understand to process of micro-processor/controller. With the help of timing diagram we can understand the working of any system, step by step working of each instruction and its execution, etc.
It is the graphical representation of process in steps with respect to time. The timing diagram represents the clock cycle and duration, delay, content of address bus and data bus, type of operation ie. Read/write/status signals.
    </string>
    <string name="td3">Important terms related to timing diagrams:</string>
    <string name="td4"><u>1. Instruction cycle:</u> </string>
    <string name="td5">This term is defined as the number of steps required by the cpu to complete the entire process ie. Fetching and execution of one instruction. The fetch and execute cycles are carried out in synchronization with the clock.</string>
    <string name="td6"><u>2. Machine cycle:</u></string>
    <string name="td7">It is the time required by the microprocessor to complete the operation of accessing the memory devices or I/O devices. In machine cycle various operations like opcode fetch, memory read, memory write, I/O read, I/O write are performed.</string>
    <string name="td8"><u>3. T-state:</u> </string>
    <string name="td9">Each clock cycle is called as T-states</string>
    <string name="td10"> Timing Diagram</string>
    <string name="td11">Opcode fetch:</string>
    <string name="td12"> The microprocessor requires instructions to perform any particular action. In order to perform these actions microprocessor utilizes Opcode which is a part of an instruction which provides detail(ie. Which operation µp needs to perform) to microprocessor.</string>
    <string name="td13">Memory Read:</string>
    <string name="td14">Operation:</string>
    <string name="td15">->It is used to fetch one byte from the memory.</string>
    <string name="td16">->It requires 3 T-States.</string>
    <string name="td17">->It can be used to fetch operand or data from the memory.</string>
    <string name="td18">->During T1, A8-A15 contains higher byte of address. At the same time ALE is high. Therefore Lower byte of address A0-A7 is selected from AD0-AD7.</string>
    <string name="td19">->Since it is memory ready operation, IO/M(bar) goes low.</string>
    <string name="td20">->During T2 ALE goes low, RD(bar) goes low. Address is removed from AD0-AD7 and data D0-D7 appears on AD0-AD7.</string>
    <string name="td21">->During T3, Data remains on AD0-AD7 till RD(bar) is at low signal.</string>
    <string name="td22">Memory Write:</string>
    <string name="td23">Operation:</string>
    <string name="td24">->It is used to send one byte into memory.</string>
    <string name="td25">->It requires 3 T-States.</string>
    <string name="td26">->During T1, ALE is high and contains lower address A0-A7 from AD0-AD7</string>
    <string name="td27">->A8-A15 contains higher byte of address.</string>
    <string name="td28">->As it is memory operation, IO/M(bar) goes low.</string>
    <string name="td29">->During T2, ALE goes low, WR(bar) goes low and Address is removed from AD0-AD7 and then data appears on AD0-AD7</string>
    <string name="td30">->Data remains on AD0-AD7 till WR(bar) is low</string>
    <string name="td31">IO Read:</string>
    <string name="td32">Operation:</string>
    <string name="td33">->It is used to fetch one byte from an IO port.
</string>
    <string name="td34">->It requires 3 T-States.</string>
    <string name="td35">
->During T1, The Lower Byte of IO address is duplicated into higher order address bus A8-A15.
</string>
    <string name="td36">->ALE is high and AD0-AD7 contains address of IO device.</string>
    <string name="td37">->IO/M (bar) goes high as it is an IO operation.</string>
    <string name="td38">->During T2, ALE goes low, RD (bar) goes low and data appears on AD0-AD7 as input from IO device.</string>
    <string name="td39">
->During T3 Data remains on AD0-AD7 till RD(bar) is low.
</string>
    <string name="td40">IO Write:</string>
    <string name="td41">Operation:</string>
    <string name="td42">->It is used to writ one byte into IO device.</string>
    <string name="td43">->It requires 3 T-States.</string>
    <string name="td44">->During T1, the lower byte of address is duplicated into higher order address bus A8-A15.</string>
    <string name="td45">->ALE is high and A0-A7 address is selected from AD0-AD7.</string>
    <string name="td46">->As it is an IO operation IO/M (bar) goes low.</string>
    <string name="td47">->During T2, ALE goes low, WR (bar) goes low and data appears on AD0-AD7 to write data into IO device.</string>
    <string name="td48">->During T3, Data remains on AD0-AD7 till WR(bar) is low.</string>


    //Intro 8086(topics)
    <string name="i1">Introduction of 8086 microprocessor</string>
    <string name="i2">8086 Microprocessor is an enhanced version of 8085 Microprocessor that was designed by intel in 1976. It is a 16-bit Microprocessor having 20 address lines and 16 data lines that provide up to 1 MB storage. It consists of powerful instruction set, which provides operations like multiplication and division easily.</string>
    <string name="i3">It supports two modes of operation, i.e. Maximum mode and Minimum mode. Maximum mode is suitable for system having multiple processors and minimum mode is suitable for system having a single processor.</string>
    <string name="i4">Features of 8086</string>
    <string name="i5">It has an instruction queue,which is capable of storing six instruction bytes from the memory resulting in faster processing.</string>
    <string name="i6">It was the first 16 bit processor having 16 bit ALU, 16 bit registers, internal data bus, and 16 bit external data bus in faster processing.</string>
    <string name="i7">It uses two stages of pipelining, i.e. Fetch Stage and Execute Stage,which improves performance.</string>
    <string name="i8">Fetch stage can prefetch up to 6 bytes of instructions and stores them in the queue.</string>
    <string name="i9">It has 256 vectored interrupts.</string>
    <string name="i10">It consists of 29,000 transistors.
    </string>

    //comparison of 8085 and 8086(topics)
    <string name="com1">Comparison of 8085 and 8086</string>
    <string name="com2">1. Size:-</string>
    <string name="com3">8085 is 8 bit microprocessor whereas 8086 is 16 bit microprocessor.</string>
    <string name="com4">2. Address Bus:-</string>
    <string name="com5">8085 has 16 bit address bus and 8086 has 20 bit address bus.</string>
    <string name="com6">3. Memory:-</string>
    <string name="com7">8085 can access up to 2^16=64 kb of memory whereas 8086 can access up to 2^20= 1 MB of memory.</string>
    <string name="com8">4. Instruction Queue:-</string>
    <string name="com9">8085 doesn\'t have an instruction queue whereas 8086 has instruction queue.</string>
    <string name="com10">5. Pipelining:-</string>
    <string name="com11">8085 does not support pipelined architecture whereas 8086 supports pipelined architecture.</string>
    <string name="com12">6. Multiprocessing Support:-</string>
    <string name="com13">8085 does not support multiprocessing whereas 8086 supports.</string>
    <string name="com14">7. I/O</string>
    <string name="com16">8. Arithmetic Support:-</string>
    <string name="com17">8085 only supports integer and decimal whereas 8086 supports integer, decimal and ASCII arithmetic.</string>
    <string name="com18">9. Multiplication and Division:-</string>
    <string name="com19">8085 does not support whereas 8086 supports.</string>
    <string name="com20">10. Operating Modes:-</string>
    <string name="com21">8085 supports only single operating mode whereas 8086 operates in two modes.</string>
    <string name="com22">11. External Hardware:- </string>
    <string name="com23">8085 requires less external hardware whereas 8086 requires more external hardware.</string>
    <string name="com24">12. Cost:-</string>
    <string name="com25">The cost of 8085 is low and 8086 is high.</string>
    <string name="com26">13. Memory Segmentation:-</string>
    <string name="com27">In 8085, memory space is not segmented but in 8086, memory space is segmented.</string>
    <string name="com28">There are some of the difference mentioned below</string>
</resources>